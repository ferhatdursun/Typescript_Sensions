{
  "compilerOptions": {
    "lib": ["ESNext"], //! ESNext JS'nin her zaman son versiyonudur. Burada ESNext'in yerine baska birsey secersek TS kodumuz JS'nin o versiyona cevrilir. Eger tarayicida calisacaksak Buraya "ESNext" den sonra "DOM" yaziyoruz.

    "target": "ES6", //! target icin secilenler kodun JS diline cevrilecek olan sürümüyle alakalidir. ES3 icin var a=5 index.js de ayni sekilde görünüyor ama ES6 da index.js'de const a=6 olarak görünüyor.

    "strict": true, //! bize daha garanti tip destegi sagliyor. Yazarken eksik kalan kisimlari tamamlamaya yardimci oluyor.

    "module": "CommonJS", //! CommonJS NodeJs projeleri icin kullaniliyor.

    "allowJs": false, //! Bunun sayesinde TypeScript icerisinde JS kullanabiliyoruz. Her JS kodu ayni zamanda TypeScript Kodududur. TS'nin farki, sadece fazladan bir kac type destegi daha sagliyor olmasidir.

    "checkJs": false, //! JS icin TS destegi sagliyor.

    "moduleResolution": "Node", //! NodeJs kullaniyorsak burada "Node" kullanmiyorsak "Classic "

    "esModuleInterop": true,

    "outDir": "dist", //! Ciktilari Dist klasörüne verecek

    "rootDir": "src", //! Kaynak kodlarimizin nerede oldugnu belirtiyor.

    "declaration": true,

    "noUnusedParameters": true //! "noUnusedLocals": true, yazilmis ama kullanilmamist parametre varsa hata döndür demek!

    // "rootDir":"src",
  }
}
